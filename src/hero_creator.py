import pygame
import re
import random
import os
import json


class HeroCreator:
    def __init__(self, screen, game_settings):
        self.screen = screen
        self.game_settings = game_settings
        self.screen_width, self.screen_height = screen.get_size()
        self.scale_factor = self.screen_height / 700  # –ë–∞–∑–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –≤–∑—è—Ç–æ 700px

        self.font_size = int(30 * self.scale_factor)
        self.font = pygame.font.Font("../assets/menu_font.otf", self.font_size)

        self.classes = ["–ú–∞–≥", "–í–æ—ó–Ω", "–õ—É—á–Ω–∏–∫"]
        self.races = ["–õ—é–¥–∏–Ω–∞", "–ï–ª—å—Ñ", "–ì–Ω–æ–º", "–ó–≤–µ—Ä–æ–ª—é–¥"]
        self.genders = ["–ü–∞—Ä—É–±–æ–∫", "–î—ñ–≤—á–∏–Ω–∞"]

        self.selected_class = 0
        self.selected_race = 0
        self.selected_gender = 0
        self.input_name = ""
        self.active_input = True

        self.menu_options = ["–Ü–º'—è", "–ö–ª–∞—Å", "–†–∞—Å–∞", "–°—Ç–∞—Ç—å", "–ü–æ—á–∞—Ç–∏"]
        self.selected_option = 0

        self.running = True
        self.finished = False

        self.bg_image = pygame.image.load("../assets/scene/intro/black.png").convert_alpha()
        self.bg_scaled = self.scale_background(self.bg_image, screen.get_size())

        try:
            self.frame_image = pygame.image.load("../assets/characters/rama.png").convert_alpha()
        except pygame.error:
            print("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–∞–º–∫—É: ../assets/characters/rama.png")
            self.frame_image = None

        self.character_image = None
        self.character_scaled = None
        self.character_pos = None
        self.frame_scaled = None
        self.text_box_rect = None
        self.text_font_size = int(24 * self.scale_factor)
        self.text_font = pygame.font.Font("../assets/menu_font.otf", self.text_font_size)

        self.update_character_image()

        self.music_file = "../assets/scene/hero_creator/dark_wood.mp3"
        self.play_music()
        self.random_name = random.choice([
            "–†–∞–µ–ª—ñ–æ–Ω", "–ï—Ä—ñ–∞–Ω", "–ê—É—Ä—ñ–Ω", "–õ—é–º—ñ–∞—Ä", "–§–µ–π—Ä—ñ—Å",
            "–°–µ–ª—ñ–∞–Ω", "–í–∞—Ä–µ–Ω", "–ó–µ–ª–∞–π—Ä", "–ö–∞–µ–ª—ñ–æ—Å", "–ú—ñ—Ä—ñ—Å–∞–Ω"
        ])


    def play_music(self):
        pygame.mixer.init()
        try:
            pygame.mixer.music.load(self.music_file)
            pygame.mixer.music.set_volume(0.5)
            pygame.mixer.music.play(-1)
        except pygame.error:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—É–∑–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É: {self.music_file}")

    def stop_music(self):
        pygame.mixer.music.stop()

    def scale_background(self, image, screen_size):
        img_width, img_height = image.get_size()
        screen_width, screen_height = screen_size
        scale_factor = max(screen_width / img_width, screen_height / img_height)
        new_width = int(img_width * scale_factor)
        new_height = int(img_height * scale_factor)
        scaled_image = pygame.transform.smoothscale(image, (new_width, new_height))
        x_offset = (screen_width - new_width) // 2
        y_offset = screen_height - new_height
        return scaled_image, (x_offset, y_offset)

    def draw_gradient_circle(self, surface, center, radius, rd, g, b, max_alpha=255):
        gradient_surface = pygame.Surface((radius * 2, radius * 2), pygame.SRCALPHA)

        for r in range(radius, 0, -1):
            alpha = int(max_alpha * (1 - (r / radius)))  # –ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –ø–æ—Å—Ç—É–ø–æ–≤–æ –∑–º–µ–Ω—à—É—î—Ç—å—Å—è –¥–æ 0 –±—ñ–ª—è –∫—Ä–∞—ó–≤
            color = (rd, g, b, alpha)
            pygame.draw.circle(gradient_surface, color, (radius, radius), r)

        surface.blit(gradient_surface, (center[0] - radius, center[1] - radius))

    def update_character_image(self):
        class_eng = {"–ú–∞–≥": "mag", "–í–æ—ó–Ω": "war", "–õ—É—á–Ω–∏–∫": "archer"}[self.classes[self.selected_class]]
        race_eng = {"–õ—é–¥–∏–Ω–∞": "hum", "–ï–ª—å—Ñ": "elf", "–ì–Ω–æ–º": "dwarf", "–ó–≤–µ—Ä–æ–ª—é–¥": "beast"}[self.races[self.selected_race]]
        gender_eng = {"–ü–∞—Ä—É–±–æ–∫": "male", "–î—ñ–≤—á–∏–Ω–∞": "female"}[self.genders[self.selected_gender]]

        image_path = f"../assets/characters/{race_eng}_{class_eng}_{gender_eng}.png"

        try:
            self.character_image = pygame.image.load(image_path).convert_alpha()
        except pygame.error:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image_path}")
            self.character_image = pygame.Surface((100, 150), pygame.SRCALPHA)

        screen_width, screen_height = self.screen.get_size()
        frame_height = int(screen_height * 0.6)

        if self.frame_image:
            aspect_ratio = self.frame_image.get_width() / self.frame_image.get_height()
            frame_width = int(frame_height * aspect_ratio)
            frame_x = screen_width - frame_width
            frame_y = screen_height - frame_height

            self.frame_scaled = pygame.transform.smoothscale(self.frame_image, (frame_width, frame_height))
            self.frame_pos = (frame_x, frame_y)

            char_width = int(frame_width * 0.7)
            char_aspect_ratio = self.character_image.get_width() / self.character_image.get_height()
            char_height = int(char_width / char_aspect_ratio)

            self.character_scaled = pygame.transform.smoothscale(self.character_image, (char_width, char_height))

            char_x = frame_x + (frame_width - char_width) // 2
            char_y = frame_y + (frame_height - char_height) // 2
            self.character_pos = (char_x, char_y)

            self.circle_center = (char_x + char_width // 2, char_y + char_height // 2)
            self.circle_radius = int(frame_width * 0.45)
            self.circle_radius_black = int(frame_width * 0.9)

        self.text_box_rect = pygame.Rect(20, frame_y + frame_height/2, frame_x - 40, frame_height/2)

    def scale_character(self, image, screen_size):
        screen_width, screen_height = screen_size
        img_width, img_height = image.get_size()

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–∞—Å—à—Ç–∞–±, —â–æ–± –≤–∏—Å–æ—Ç–∞ –±—É–ª–∞ 1/3 –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω—É
        scale_factor = (screen_height / 2) / img_height
        new_width = int(img_width * scale_factor)
        new_height = int(img_height * scale_factor)

        scaled_image = pygame.transform.smoothscale(image, (new_width, new_height))

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é (10% –≤—ñ–¥ –ø—Ä–∞–≤–æ–≥–æ –∫—Ä–∞—é)
        x_pos = screen_width - new_width - int(screen_width * 0.1)
        y_pos = screen_height - new_height  # –ù–∏–∂–Ω—ñ–π –∫—Ä–∞–π –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ –∫—Ä–∞—î–º –µ–∫—Ä–∞–Ω—É

        return scaled_image, (x_pos, y_pos)

    def draw_text_box(self):
        if self.text_box_rect:
            # **–ù–µ –º–∞–ª—é—î–º–æ —Ñ–æ–Ω, –∞ –ø—Ä–æ—Å—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö —Å—Ü–µ–Ω–∏**
            text = self.get_character_description()
            lines = self.wrap_text(text, self.text_box_rect.width - 20)

            y_offset = self.text_box_rect.y + 10
            for line in lines:
                rendered_text = self.text_font.render(line, True, (255, 255, 255))  # –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ–Ω—É
                self.screen.blit(rendered_text, (self.text_box_rect.x + 10, y_offset))
                y_offset += self.text_font.get_height()

    def get_character_description(self):
        file_path = "../assets/characters/characters.txt"

        try:
            with open(file_path, "r", encoding="utf-8") as file:
                lines = [line.rstrip() for line in file.readlines()]  # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –ø—Ä–∞–≤–æ—Ä—É—á
        except FileNotFoundError:
            print(f"–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å–µ–∫—Ü—ñ—é, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞–π—Ç–∏ ("–ß–æ–ª–æ–≤—ñ–∫–∏" –∞–±–æ "–ñ—ñ–Ω–∫–∏")
        gender_header = "–ß–æ–ª–æ–≤—ñ–∫–∏:" if self.genders[self.selected_gender] == "–ü–∞—Ä—É–±–æ–∫" else "–ñ—ñ–Ω–∫–∏:"

        found_gender_section = False  # –ß–∏ –∑–Ω–∞–π—à–ª–∏ —Å–µ–∫—Ü—ñ—é –ß–æ–ª–æ–≤—ñ–∫–∏/–ñ—ñ–Ω–∫–∏
        found_character = False  # –ß–∏ –∑–Ω–∞–π—à–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        description = []  # –û–ø–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

        # –§–æ—Ä–º—É—î–º–æ –∫–ª—é—á –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: "–ö–ª–∞—Å - –†–∞—Å–∞"
        character_key = f"{self.classes[self.selected_class]} - {self.races[self.selected_race]}"

        print(f"–®—É–∫–∞—î–º–æ: {character_key} —É —Å–µ–∫—Ü—ñ—ó {gender_header}")  # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞

        for line in lines:
            print(f"–ß–∏—Ç–∞—î–º–æ —Ä—è–¥–æ–∫: {line}")  # –î–µ–±–∞–≥ –≤–∏–≤—ñ–¥ –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞

            # –ü–æ—à—É–∫ —Å–µ–∫—Ü—ñ—ó (–ß–æ–ª–æ–≤—ñ–∫–∏ –∞–±–æ –ñ—ñ–Ω–∫–∏)
            if not found_gender_section:
                if line == gender_header:
                    found_gender_section = True
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü—ñ—é: {gender_header}")
                continue

            # –Ø–∫—â–æ –Ω–∞—Ç—Ä–∞–ø–∏–ª–∏ –Ω–∞ —ñ–Ω—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ß–æ–ª–æ–≤—ñ–∫–∏/–ñ—ñ–Ω–∫–∏), –≤–∏—Ö–æ–¥–∏–º–æ –∑ –ø–æ—à—É–∫—É
            if found_gender_section and (line == "–ß–æ–ª–æ–≤—ñ–∫–∏:" or line == "–ñ—ñ–Ω–∫–∏:"):
                print(f"‚õî –í–∏—è–≤–ª–µ–Ω–æ –Ω–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ({line}), –≤–∏—Ö–æ–¥–∏–º–æ –∑ –±–ª–æ–∫—É –ø–æ—à—É–∫—É.")
                break

            # –Ø–∫—â–æ –≤–∂–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∑–∞–ø–∏—Å—É—î–º–æ –π–æ–≥–æ –æ–ø–∏—Å
            if found_character:
                if line == "":  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ = –∫—ñ–Ω–µ—Ü—å –æ–ø–∏—Å—É
                    print("üîö –ö—ñ–Ω–µ—Ü—å –æ–ø–∏—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
                    break
                description.append(line)
                print(f"‚ûï –î–æ–¥–∞—î–º–æ –æ–ø–∏—Å: {line}")

            # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–æ—á–∏–Ω–∞—î–º–æ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –æ–ø–∏—Å
            elif line == character_key:
                found_character = True
                print(f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character_key}")

        # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
        if description:
            return " ".join(description)
        else:
            print("‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ '–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'")
            return "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π."

    def wrap_text(self, text, max_width):
        words = text.split()
        lines = []
        current_line = ""

        for word in words:
            test_line = f"{current_line} {word}".strip()
            if self.text_font.size(test_line)[0] <= max_width:
                current_line = test_line
            else:
                lines.append(current_line)
                current_line = word

        if current_line:
            lines.append(current_line)

        return lines

    def handle_events(self, event):
        if event.type == pygame.KEYDOWN:
            if self.selected_option == 0:
                if event.key == pygame.K_BACKSPACE:
                    self.input_name = self.input_name[:-1]
                else:
                    char = event.unicode
                    if re.match("^[–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë]$", char) and len(self.input_name) < 15:
                        if len(self.input_name) == 0:
                            self.input_name += char.upper()
                        else:
                            self.input_name += char.lower()
            if self.selected_option == 4:
                if event.key == pygame.K_RETURN:
                    self.save_hero()

            if event.key == pygame.K_UP:
                self.selected_option = (self.selected_option - 1) % len(self.menu_options)
            elif event.key == pygame.K_DOWN:
                self.selected_option = (self.selected_option + 1) % len(self.menu_options)
            elif event.key == pygame.K_LEFT:
                if self.selected_option == 1:
                    self.selected_class = (self.selected_class - 1) % len(self.classes)
                elif self.selected_option == 2:
                    self.selected_race = (self.selected_race - 1) % len(self.races)
                elif self.selected_option == 3:
                    self.selected_gender = (self.selected_gender - 1) % len(self.genders)
                self.update_character_image()  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            elif event.key == pygame.K_RIGHT:
                if self.selected_option == 1:
                    self.selected_class = (self.selected_class + 1) % len(self.classes)
                elif self.selected_option == 2:
                    self.selected_race = (self.selected_race + 1) % len(self.races)
                elif self.selected_option == 3:
                    self.selected_gender = (self.selected_gender + 1) % len(self.genders)
                self.update_character_image()  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            elif event.key == pygame.K_RETURN:
                if self.selected_option == 4 and self.input_name:
                    self.save_hero()
                    self.finished = True
                    self.stop_music()

    def update(self, paused):
        if paused:
            return
        self.render()

    def render(self):
        self.screen.blit(*self.bg_scaled)
        y_offset = int(self.screen_height*0.05)

        for i, option in enumerate(self.menu_options):
            color = (255, 255, 255) if i == self.selected_option else (200, 200, 200)

            if option == "–Ü–º'—è":
                text = f"–Ü–º'—è: {self.input_name if self.input_name else self.random_name}"
            elif option == "–ö–ª–∞—Å":
                text = f"–ö–ª–∞—Å: {self.classes[self.selected_class]}"
            elif option == "–†–∞—Å–∞":
                text = f"–†–∞—Å–∞: {self.races[self.selected_race]}"
            elif option == "–°—Ç–∞—Ç—å":
                text = f"–°—Ç–∞—Ç—å: {self.genders[self.selected_gender]}"
            else:
                text = option

            rendered_text = self.font.render(text, True, color)
            self.screen.blit(rendered_text, (50, y_offset))
            y_offset += int(self.screen_height*0.1)

        self.draw_text_box()

        if self.character_scaled:
            self.draw_gradient_circle(self.screen, self.circle_center, self.circle_radius_black, 20, 20, 40, 255)
            self.draw_gradient_circle(self.screen, self.circle_center, self.circle_radius, 255, 255, 255, 255)
            self.screen.blit(self.character_scaled, self.character_pos)

        if self.frame_scaled:
            self.screen.blit(self.frame_scaled, self.frame_pos)

        pygame.display.flip()

    def save_hero(self):
        hero_data = {
            "name": self.input_name if self.input_name else self.random_name,
            "class": self.classes[self.selected_class],
            "race": self.races[self.selected_race],
            "gender": self.genders[self.selected_gender],
            "hero_create": "done"
        }

        save_dir = "../game_save/"

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º .sav
        save_files = [f for f in os.listdir(save_dir) if f.endswith(".sav")]

        if save_files:
            save_path = os.path.join(save_dir, save_files[0])  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π .sav —Ñ–∞–π–ª
            with open(save_path, "w", encoding="utf-8") as save_file:
                json.dump(hero_data, save_file, ensure_ascii=False, indent=4)
            print("–ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —É —Ñ–∞–π–ª:", save_path)
        else:
            print("–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª .sav –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∫–∞—Ç–∞–ª–æ–∑—ñ game_save.")

    def is_finished(self):
        return self.finished
