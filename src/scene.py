import pygame
import time
import random


class Scene:
    def __init__(self, screen, backgrounds, texts, game_settings, music_file=None):
        self.screen = screen
        self.backgrounds = backgrounds  # [(—à–ª—è—Ö, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, fade-in, fade-out, move, move_direction)]
        self.texts = texts
        self.music_file = music_file
        self.current_text_index = 0
        self.current_bg_index = 0
        self.elapsed_time = 0
        self.paused = False
        self.font = pygame.font.Font("../assets/menu_font.otf", 30)
        self.text_start_time = time.time()

        self.screen_resolution = tuple(game_settings.get("resolution"))
        self.fullscreen = game_settings.get("fullscreen")

        self.bg_image = None
        self.bg_scaled = None
        self.bg_pos = (0, 0)

        self.bg_alpha = 255
        self.fade_in_duration = 0
        self.fade_out_duration = 0
        self.fade_state = None
        self.bg_start_time = 0

        self.bg_start_pos = (0, 0)
        self.bg_end_pos = (0, 0)
        self.should_move = False
        self.move_direction = None

        self.paused_time = 0  # –ß–∞—Å, –∫–æ–ª–∏ –±—É–ª–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø–∞—É–∑–∞
        self.last_update_time = 0  # –û—Å—Ç–∞–Ω–Ω—ñ–π –º–æ–º–µ–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

        self.load_background(self.current_bg_index)
        if self.music_file:
            self.play_music()


    def load_background(self, index):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–æ–Ω –∑–∞ –π–æ–≥–æ —ñ–Ω–¥–µ–∫—Å–æ–º —É —Å–ø–∏—Å–∫—É `backgrounds`."""
        if index < len(self.backgrounds):
            bg_path, duration, fade_in_duration, fade_out_duration, self.should_move, *optional_move_direction = self.backgrounds[index]
            self.move_direction = optional_move_direction[0] if optional_move_direction else None
            try:
                self.bg_image = pygame.image.load(bg_path).convert_alpha()
                self.scale_background()

                if self.bg_scaled is None:
                    print(f"–ü–æ–º–∏–ª–∫–∞: —Ñ–æ–Ω {bg_path} –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

                # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ fade-in —Ç–∞ fade-out
                self.fade_in_duration = min(fade_in_duration, duration)  # fade-in –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ —Ñ–æ–Ω
                self.fade_out_duration = min(fade_out_duration, duration)  # fade-out –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ —Ñ–æ–Ω
                self.bg_start_time = self.elapsed_time  # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Ñ–æ–Ω—É

                # –Ø–∫—â–æ fade-in –∞–∫—Ç–∏–≤–Ω–∏–π, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ –ø—Ä–æ–∑–æ—Ä–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                if self.fade_in_duration > 0:
                    self.bg_alpha = 0
                    self.fade_state = "fade_in"
                else:
                    self.bg_alpha = 255
                    self.fade_state = None  # –Ø–∫—â–æ fade-in –Ω–µ–º–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è

                self.set_background_animation()
            except pygame.error:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ–Ω—É: {bg_path}")


    def set_background_animation(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É –¥–ª—è —Ñ–æ–Ω—É, —è–∫—â–æ –≤—ñ–Ω –∑–∞–¥–∞–Ω–∏–π, –∞–±–æ –æ–±–∏—Ä–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –Ω–∞–ø—Ä—è–º–æ–∫."""
        if self.bg_scaled:
            bg_width, bg_height = self.bg_scaled.get_size()
            screen_width, screen_height = self.screen_resolution

            overflow_x = bg_width - screen_width
            overflow_y = bg_height - screen_height

            if not self.should_move:
                return

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ –Ω–∞–ø—Ä—è–º–∫–∏ —Ä—É—Ö—É
            possible_directions = []
            if overflow_x > 0:
                possible_directions.extend(["left", "right"])
            if overflow_y > 0:
                possible_directions.extend(["up", "down"])

            # üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ move_direction, —è–∫—â–æ –≤—ñ–Ω –≤–∫–∞–∑–∞–Ω–∏–π —ñ –º–æ–∂–ª–∏–≤–∏–π
            if self.move_direction in possible_directions:
                move_direction = self.move_direction
            else:
                move_direction = random.choice(possible_directions) if possible_directions else None

            # üîπ –ü—Ä–∏–º—É—Å–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—É—Ö —É –≤–∫–∞–∑–∞–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
            if move_direction == "left":
                self.bg_start_pos = (0, -overflow_y // 2)
                self.bg_end_pos = (-overflow_x, -overflow_y // 2)
            elif move_direction == "right":
                self.bg_start_pos = (-overflow_x, -overflow_y // 2)
                self.bg_end_pos = (0, -overflow_y // 2)
            elif move_direction == "up":
                self.bg_start_pos = (-overflow_x // 2, 0)
                self.bg_end_pos = (-overflow_x // 2, -overflow_y)
            elif move_direction == "down":
                self.bg_start_pos = (-overflow_x // 2, -overflow_y)
                self.bg_end_pos = (-overflow_x // 2, 0)

            self.bg_pos = self.bg_start_pos
            self.animation_progress = 0  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –∞–Ω—ñ–º–∞—Ü—ñ—ó


    def scale_background(self):
        """–ú–∞—Å—à—Ç–∞–±—É—î —Ñ–æ–Ω, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó, —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î –∞–Ω—ñ–º–∞—Ü—ñ—é —Ä—É—Ö—É."""
        if self.bg_image:
            bg_width, bg_height = self.bg_image.get_size()
            screen_width, screen_height = self.screen_resolution

            # –û–±—á–∏—Å–ª—é—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–∫—Ä–∏—Ç—Ç—è –µ–∫—Ä–∞–Ω—É –±–µ–∑ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω—å
            scale_factor = max(screen_width / bg_width, screen_height / bg_height)

            # –ù–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            new_width = int(bg_width * scale_factor)
            new_height = int(bg_height * scale_factor)

            # –ú–∞—Å—à—Ç–∞–±—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            self.bg_scaled = pygame.transform.smoothscale(self.bg_image, (new_width, new_height))

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ñ–æ–Ω —à–∏—Ä—à–∏–π –∞–±–æ –≤–∏—â–∏–π –∑–∞ –µ–∫—Ä–∞–Ω
            overflow_x = new_width - screen_width
            overflow_y = new_height - screen_height

            if self.should_move:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä—É—Ö–∞—Ç–∏ —Ñ–æ–Ω
                overflow_x = new_width - screen_width
                overflow_y = new_height - screen_height

                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ –Ω–∞–ø—Ä—è–º–∫–∏ —Ä—É—Ö—É
                possible_directions = []
                if overflow_x > 0:
                    possible_directions.extend(["left", "right"])
                if overflow_y > 0:
                    possible_directions.extend(["up", "down"])

                # –í–∏–ø–∞–¥–∫–æ–≤–æ –æ–±–∏—Ä–∞—î–º–æ –æ–¥–∏–Ω –∑ –º–æ–∂–ª–∏–≤–∏—Ö –Ω–∞–ø—Ä—è–º–∫—ñ–≤ —Ä—É—Ö—É
                move_direction = random.choice(possible_directions)

                if move_direction == "left":
                    self.bg_start_pos = (0, -overflow_y // 2)
                    self.bg_end_pos = (-overflow_x, -overflow_y // 2)
                elif move_direction == "right":
                    self.bg_start_pos = (-overflow_x, -overflow_y // 2)
                    self.bg_end_pos = (0, -overflow_y // 2)
                elif move_direction == "up":
                    self.bg_start_pos = (-overflow_x // 2, 0)
                    self.bg_end_pos = (-overflow_x // 2, -overflow_y)
                elif move_direction == "down":
                    self.bg_start_pos = (-overflow_x // 2, -overflow_y)
                    self.bg_end_pos = (-overflow_x // 2, 0)

                # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è
                self.bg_pos = self.bg_start_pos
            else:
                self.should_move = False


    def play_music(self):
        """–ó–∞–ø—É—Å–∫–∞—î –º—É–∑–∏–∫—É –¥–ª—è —Å—Ü–µ–Ω–∏."""
        pygame.mixer.init()
        try:
            pygame.mixer.music.load(self.music_file)
            pygame.mixer.music.set_volume(0.5)
            pygame.mixer.music.play(-1)
        except pygame.error:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º—É–∑–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É: {self.music_file}")


    def stop_music_fadeout(self, fade_duration=3000):
        """–ü–ª–∞–≤–Ω–æ –∑—É–ø–∏–Ω—è—î –º—É–∑–∏–∫—É —ñ–∑ –∑–∞—Ç—É—Ö–∞–Ω–Ω—è–º."""
        if pygame.mixer.music.get_busy():  # –Ø–∫—â–æ –º—É–∑–∏–∫–∞ —â–µ –≥—Ä–∞—î
            pygame.mixer.music.fadeout(fade_duration)


    def handle_events(self, event):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π: `Space` –ø—Ä–æ–ø—É—Å–∫–∞—î —Ç–µ–∫—Å—Ç, `T` –∑–∞–≤–µ—Ä—à—É—î —Å—Ü–µ–Ω—É."""
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                self.skip_text()
            elif event.key == pygame.K_t:
                self.end_scene()

    def end_scene(self):
        """–ú–∏—Ç—Ç—î–≤–æ –∑–∞–≤–µ—Ä—à—É—î —Å—Ü–µ–Ω—É."""
        self.scene_finished = True
        self.stop_music_fadeout()  # –ü–ª–∞–≤–Ω–µ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –º—É–∑–∏–∫–∏
        self.elapsed_time = sum(bg[1] for bg in self.backgrounds)  # –ü–µ—Ä–µ–º–æ—Ç—É—î–º–æ —á–∞—Å –¥–æ –∫—ñ–Ω—Ü—è
        self.current_bg_index = len(self.backgrounds)  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ —Ñ–æ–Ω–∏
        self.current_text_index = len(self.texts)  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—Å—ñ —Ç–µ–∫—Å—Ç–∏


    def skip_text(self):
        """–ü—Ä–æ–ø—É—Å–∫–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π, —è–∫—â–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ."""
        _, text_duration, min_skip_time = self.texts[self.current_text_index]
        elapsed_text_time = time.time() - self.text_start_time

        if elapsed_text_time >= min_skip_time:
            if self.current_text_index < len(self.texts) - 1:
                self.current_text_index += 1
                self.text_start_time = time.time()


    def update(self, paused):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏: —Ä—É—Ö —Ñ–æ–Ω—É, fade-in, fade-out —Ç–∞ –∑–º—ñ–Ω–∞ —Ñ–æ–Ω—É."""
        if self.scene_finished:
            return  # –Ø–∫—â–æ —Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–µ –º–∞–ª—é—î–º–æ –Ω—ñ—á–æ–≥–æ

        if paused:
            self.paused = True
            return  # –ù–µ –æ–Ω–æ–≤–ª—é—î–º–æ –Ω—ñ—á–æ–≥–æ –ø—ñ–¥ —á–∞—Å –ø–∞—É–∑–∏

        if self.paused:
            self.paused = False  # –í–∏—Ö–æ–¥–∏–º–æ –∑ –ø–∞—É–∑–∏

        if self.current_text_index >= len(self.texts):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ —Ç–µ–∫—Å—Ç
            return

        _, text_duration, _ = self.texts[self.current_text_index]
        elapsed_text_time = time.time() - self.text_start_time

        if elapsed_text_time >= text_duration:
            self.skip_text()

        self.elapsed_time += 1 / 60  # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä

        total_scene_duration = sum(bg[1] for bg in self.backgrounds)  # –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —Å—Ü–µ–Ω–∏
        fade_music_start_time = total_scene_duration - 3  # –ü–æ—á–∞—Ç–æ–∫ –∑–∞—Ç—É—Ö–∞–Ω–Ω—è –∑–∞ 3 —Å–µ–∫ –¥–æ –∫—ñ–Ω—Ü—è —Å—Ü–µ–Ω–∏

        if self.elapsed_time >= fade_music_start_time and self.music_file:
            self.stop_music_fadeout()  # üîπ –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞—Ç—É—Ö–∞–Ω–Ω—è –º—É–∑–∏–∫–∏ –ø–µ—Ä–µ–¥ –∫—ñ–Ω—Ü–µ–º —Å—Ü–µ–Ω–∏

        if self.current_bg_index < len(self.backgrounds):  # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —ñ–Ω–¥–µ–∫—Å –≤ –º–µ–∂–∞—Ö —Å–ø–∏—Å–∫—É
            current_bg_duration = self.backgrounds[self.current_bg_index][1]
            time_since_bg_start = self.elapsed_time - self.bg_start_time

            # ‚úÖ –û–±—Ä–æ–±–∫–∞ fade-in
            if not paused and self.fade_state == "fade_in" and time_since_bg_start < self.fade_in_duration:
                fade_step = int(255 / (self.fade_in_duration * 60))
                self.bg_alpha = min(255, self.bg_alpha + fade_step)

                if self.bg_alpha >= 255:
                    self.fade_state = None

            # ‚úÖ –û–±—Ä–æ–±–∫–∞ fade-out –ø–µ—Ä–µ–¥ –∑–º—ñ–Ω–æ—é —Ñ–æ–Ω—É
            fade_out_start_time = current_bg_duration - self.fade_out_duration
            if not paused and self.fade_out_duration > 0 and time_since_bg_start >= fade_out_start_time:
                self.fade_state = "fade_out"

            if not paused and self.fade_state == "fade_out":
                fade_step = int(255 / (self.fade_out_duration * 60))
                self.bg_alpha = max(0, self.bg_alpha - fade_step)

                if self.bg_alpha <= 0:
                    self.current_bg_index += 1
                    if self.current_bg_index < len(self.backgrounds):
                        self.load_background(self.current_bg_index)

            if self.should_move:
                progress = min(1, time_since_bg_start / current_bg_duration)
                self.bg_pos = (
                    self.bg_start_pos[0] + (self.bg_end_pos[0] - self.bg_start_pos[0]) * progress,
                    self.bg_start_pos[1] + (self.bg_end_pos[1] - self.bg_start_pos[1]) * progress
                )

        self.render()


    def render(self):
        """–ú–∞–ª—é—î —Å—Ü–µ–Ω—É –Ω–∞ –µ–∫—Ä–∞–Ω—ñ –∑ fade-in —Ç–∞ fade-out –µ—Ñ–µ–∫—Ç–∞–º–∏."""
        if self.scene_finished:
            return  # –Ø–∫—â–æ —Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω—ñ—á–æ–≥–æ –Ω–µ –º–∞–ª—é—î–º–æ

        if self.bg_scaled:
            temp_bg = self.bg_scaled.copy()
            temp_bg.set_alpha(self.bg_alpha)  # ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å
            self.screen.blit(temp_bg, self.bg_pos)
        else:
            self.screen.fill((0, 0, 0))

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —â–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        if self.current_text_index < len(self.texts):
            self.font = self.get_scaled_font()
            text, _, _ = self.texts[self.current_text_index]
            text_surface = self.font.render(text, True, (255, 255, 255))

            text_rect = text_surface.get_rect(center=(self.screen_resolution[0] // 2, self.screen_resolution[1] - 100))
            if text.strip():
                padding = 10  # –í—ñ–¥—Å—Ç—É–ø–∏ –¥–æ–≤–∫–æ–ª–∞ —Ç–µ–∫—Å—Ç—É
                bg_rect = pygame.Rect(text_rect.left - padding, text_rect.top - padding,
                                      text_rect.width + padding * 2, text_rect.height + padding * 2)

                # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–µ—Ä—Ö–Ω—é –¥–ª—è —Ñ–æ–Ω—É
                text_bg = pygame.Surface((bg_rect.width, bg_rect.height), pygame.SRCALPHA)
                text_bg.fill((0, 0, 0, 150))
                self.screen.blit(text_bg, bg_rect.topleft)

            self.screen.blit(text_surface, text_rect)

        pygame.display.flip()


    def is_finished(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è —Å—Ü–µ–Ω–∞ (–≤—Å—ñ —Ñ–æ–Ω–∏ –ø–æ–∫–∞–∑–∞–Ω—ñ –ø–æ–≤–Ω—ñ—Å—Ç—é)."""

        # –Ø–∫—â–æ —â–µ —î —Ñ–æ–Ω–∏ –¥–ª—è –ø–æ–∫–∞–∑—É ‚Äì —Å—Ü–µ–Ω–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        if self.current_bg_index < len(self.backgrounds) - 1:
            return False

        # –Ø–∫—â–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —Å—Ü–µ–Ω–∏ —â–µ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è ‚Äì –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
        if self.elapsed_time < sum(bg[1] for bg in self.backgrounds):
            return False

        self.stop_music_fadeout()  # ‚úÖ –ó—É–ø–∏–Ω—è—î–º–æ –º—É–∑–∏–∫—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
        return True


    def get_scaled_font(self):
        """–û–±—á–∏—Å–ª—é—î —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∏—Å–æ—Ç–∏ –µ–∫—Ä–∞–Ω—É."""
        screen_height = self.screen_resolution[1]
        font_size = max(14, int(screen_height * 0.03))
        return pygame.font.Font("../assets/menu_font.otf", font_size)


    def update_screen_settings(self, new_resolution, fullscreen):
        """–û–Ω–æ–≤–ª—é—î —Ä–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É —Ç–∞ –∞–¥–∞–ø—Ç—É—î —Ç–µ–∫—Å—Ç —ñ —Ñ–æ–Ω."""
        if new_resolution == "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞":
            new_resolution = pygame.display.get_desktop_sizes()[0]  # –û—Ç—Ä–∏–º—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Ä–æ–∑–¥—ñ–ª—å–Ω—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –µ–∫—Ä–∞–Ω—É
            fullscreen = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∫–ª—é—á–∞—î–º–æ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º

        self.screen_resolution = new_resolution
        self.fullscreen = fullscreen